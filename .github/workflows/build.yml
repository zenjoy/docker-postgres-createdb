name: Build and push container images

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - 'Dockerfile'
      - 'entrypoint.sh'
  pull_request:
    branches: [main]
    paths:
      - 'Dockerfile'
      - 'entrypoint.sh'

env:
  DOCKER_BUILDKIT: 1
  COSIGN_EXPERIMENTAL: 1

jobs:
  build:
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    name: Build and publish image
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        postgresql_version: [14, 15]

    permissions:
      id-token: write # keyless Cosign signatures
      packages: write # GHCR
      contents: write # git tags

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Generate docker image name
        id: name
        run: echo "name=$(echo ${GITHUB_REPOSITORY,,} | sed 's/docker-//')" | tee -a $GITHUB_OUTPUT

      - name: Generate OCI image title
        id: title
        run:
          echo "title=$(echo ${GITHUB_REPOSITORY#*/} | sed 's/docker-//')" | tee -a $GITHUB_OUTPUT

      - name: Parse Alpine Version
        id: alpine
        run: |
          ALPINE_VERSION=$(grep -Eo 'alpine:[0-9]+\.[0-9]+\.[0-9]+$' Dockerfile | cut -d ':' -f2 | rev | cut -d . -f2- | rev)
          echo "version=$ALPINE_VERSION" | tee -a $GITHUB_OUTPUT

      - name: Get PostgreSQL version
        id: package_versions
        uses: dedene/curl@main
        with:
          url:
            https://pkgs.alpinelinux.org/packages?name=postgresql${{
            matrix.postgresql_version}}-client\&branch=v${{ steps.alpine.outputs.version }}

      - name: Parse PostgreSQL version
        id: pg_version
        run: |
          POSTGRESQL_VERSION=$(echo '${{ steps.package_versions.outputs.curl_output }}' | tr '\n' ' ' | grep -oP '(?<=<td class="version">)[^<]*' | head -1)
          POSTGRESQL_VERSION="${POSTGRESQL_VERSION%%_*}"
          POSTGRESQL_VERSION="${POSTGRESQL_VERSION%%-*}"

          POSTGRESQL_MAJOR_VERSION=$(echo $POSTGRESQL_VERSION | cut -d . -f 1)
          POSTGRESQL_MINOR_VERSION=$(echo $POSTGRESQL_VERSION | cut -d . -f 2)
          echo "pg_major=$POSTGRESQL_MAJOR_VERSION" | tee -a $GITHUB_OUTPUT
          echo "pg_minor=$POSTGRESQL_VERSION" | tee -a $GITHUB_OUTPUT
          echo "pg_version=$POSTGRESQL_VERSION" | tee -a $GITHUB_OUTPUT

      - name: Generate build tag from head
        id: branch
        run: |
          export GIT_REF=${GITHUB_HEAD_REF:-$GITHUB_REF_NAME}
          echo "branch=$(echo ${GIT_REF,,} | sed 's/[^a-zA-Z0-9]/-/g')" | tee -a $GITHUB_OUTPUT

      - name: Generate Docker metadata with PostgreSQL version
        uses: docker/metadata-action@v4
        id: metadata
        with:
          flavor: |
            latest=${{ matrix.postgresql_version == '15' }}
          images: |
            docker.io/${{ steps.name.outputs.name }}
            ghcr.io/${{ steps.name.outputs.name }}
          tags: |
            type=semver,pattern={{major}}.{{minor}},value=v${{ steps.pg_version.outputs.version }}.0
            type=semver,pattern={{major}},value=v${{ steps.pg_version.outputs.version }}.0
          labels: |
            org.opencontainers.image.title=${{ steps.title.outputs.title }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.0.3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Login to GitHub Container Repository
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Publish container image
        uses: docker/build-push-action@v4
        id: publish
        with:
          push: true
          context: '.'
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign container images
        run: |
          cosign sign --yes --recursive "docker.io/$IMAGE_NAME@$IMAGE_DIGEST"
          cosign sign --yes --recursive "ghcr.io/$IMAGE_NAME@$IMAGE_DIGEST"
        env:
          IMAGE_NAME: ${{ steps.name.outputs.name }}
          IMAGE_DIGEST: ${{ steps.publish.outputs.digest }}

      - name: Push version tags
        run: |
          git tag -f "v$MAJOR"
          git tag -f "v$MAJOR.$MINOR"
          git push -f -u origin "v$MAJOR"
          git push -f -u origin "v$MAJOR.$MINOR"
        env:
          MINOR: ${{ steps.pg_version.outputs.minor }}
          MAJOR: ${{ steps.pg_version.outputs.major }}
